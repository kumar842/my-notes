Source: https://www.youtube.com/playlist?list=PLqq-6Pq4lTTbx8p2oCgcAQGQyqN8XeA1x

https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html


1. what is Spring boot?
 Spring boot makes it easy to create stand-alone, production-grade Spring based Appplciations that can "just run".

 .. create .. Spring based Applications...
 stand-alone
 production-grade
 just-run


2. What is Spring?
   - Whole Application framework
 	    - not just dependency injection
 	    - let's you build entriprise Java apps by providing the templates..
 
   - Programming and configuration model
 	    - u ll focus on building business services and u will let spring to handle the common concerns.. like database connection, running queries, handling http requests, mvc layer, security etc.
 
   - Infrastructure support


3. Problems with Spring
   - Huge framework
   - Multiple setup steps
   - Multiple configuration steps
   - Multiple bulid and deploy steps
 
 Can we abstract these steps?


4. Enter Spring Boot
    - Opinionated
    - Convention over configuration
    - Stand alone
    - Production ready


5. Starting Spring Boot
    - Sets up default configuration
    - Stars Spring application context
    - Performs class path scan
    - Starts tomcat server


6. What's happening here.
  - Bill of materials
  - Embedded Tomcat Server
      - convenience
      - Servlet container config is now application config
      - Standalone application
      - Useful for microservices architecture


7. Spring MVC Controller
  - Image - video 15

  Resources:
    Topic, Course, Lesson
    A topic can have multiple courses and a course can consist of multiple lessons

      Topics:
        GET      /topics      Gets all topics
        GET      /topics/id   Get the topic
        POST     /topics      Create new topic
        PUT      /topics/id   Updates the topic
        DELETE   /topics/id   Deletes the topic

  Business Services:
    TopicService

8. Starting a Spring Boot App
  - Spring Initalizr
  - Spring Boot CLI
  - STS IDE

9. Configuration
    - configure the port (default 8080) of servlet container

10. Sring Data JPA: The Data Tier
    - JPA -> Java Persistence API
              - ORM - let's u to map entity classes to database tables
                  - Relational Database ..jdbc..named queries..  

    - Spring Data JPA
        - is more than just a general JPA




org.springframework.boot.SpringApplication

Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application: 
• Create an appropriate ApplicationContext instance (depending on your classpath)
• Register a CommandLinePropertySource to expose command line arguments as Spring properties
• Refresh the application context, loading all singleton beans
• Trigger any CommandLineRunner beans

In most circumstances the static run(Class, String []) method can be called directly from your main method to bootstrap your application:  @Configuration
 @EnableAutoConfiguration
 public class MyApplication  {

   // ... Bean definitions

   public static void main(String[] args) throws Exception {
     SpringApplication.run(MyApplication.class, args);
   }
 }
 

For more advanced configuration a SpringApplication instance can be created and customized before being run: 
 public static void main(String[] args) throws Exception {
   SpringApplication application = new SpringApplication(MyApplication.class);
   // ... customize application settings here
   application.run(args)
 }


 
SpringApplications can read beans from a variety of different sources. It is generally recommended that a single @Configuration class is used to bootstrap your application, however, you may also set sources from: 
•The fully qualified class name to be loaded by AnnotatedBeanDefinitionReader
•The location of an XML resource to be loaded by XmlBeanDefinitionReader, or a groovy script to be loaded by GroovyBeanDefinitionReader
•The name of a package to be scanned by ClassPathBeanDefinitionScanner
Configuration properties are also bound to the SpringApplication. This makes it possible to set SpringApplication properties dynamically, like additional sources ("spring.main.sources" - a CSV list) the flag to indicate a web environment ("spring.main.web-application-type=none") or the flag to switch off the banner ("spring.main.banner-mode=off").Author:Phillip WebbDave SyerAndy WilkinsonChristian DupuisStephane NicollJeremy RickardCraig BurkeMichael SimonsMadhura BhaveBrian ClozelEthan RubinsonSee Also:run(Class, String [])run(Class [], String [])SpringApplication(Class)


--------- Spring Security --------
 - Protection against attacks like session fixation, clickjacking, cross site request forgery, etc
 - OS level security, JVM level security, App server level security, .. Application level security
 - App level security
 - Security threats are constantly evolving & morphing...
 - Security Guard :: Who are you? & What do you want?
- Security
    - Login & Logout functionality
    - Allow/block access to URLs to logged in users
    - Allow/block access to URLs to logged in users AND with certain roles

Spring security + configuration -> Flexible & customization
Handles lot of common vulnerabilities
    - Session fixation
    - clickjacking
    - Click site request forgery

widely adopted

What spring security can do?
 * username/password authentication
 * SSO/Okta/LDAP
 * App level authorization
 * Intra App Authorization like OAuth
 * Miroservice security(using token, JWT)
 * Method level security

Core concepts in spring security:
 * Authentication
 * Authorization
 * Principal
 * Granted Authority
 * Roles

1. Authentication: (Answering Who are you? with proof)
   - Knowledge based Authentication -> Password, Pin code, Answer to a secret question
     - simple, Easy to implement & use.
     - Not fully safe
   - Possession based Authentication -> Phone/text messages, Key cards & badges, Access token device
   - Multi Factor Authentication -> both 1 & 2

2. Authorization: (Can this user do this? Yes/No)
   - Needs Authentication at first place
   - Retail store - store clerk, department manager, store manager

3. Principal:
   - currently logged in user/account
   - the application establishes prinicipal & it remembers, that's why you don't need to enter passowrd every time..

4. Granted Authority:
   - Authorities/Permissions for each user - should be definied prior
   - configure the permissions
   - fine-grained

5. Role:
    - Group of authorities
    - role_store_clerk, role_dept_mgr, role_store_mgr
    - Coarse-grained


- dependency: spring-boot-starter-security
- underneeth servlet technologies.. multiple servlets in the web-app to server diff. requests etc.. servlets are mapped to urls..

Filters: 
  - Intercepts every request or cross-cutting
  - log every request, check every request to see if a header exists etc. 
  - Spring security is putting a security filter before all servlets

Spring security default behavior:
  - Adds mandatory authentication for all URLs (few are skipped like error...)
  - Adds login form
  - Handles login error
  - Creates a user & sets a default password: user/*** check log.
  - customize: 
    - spring.security.user.name=foo
    - spring.security.user.password=foo


AuthenticationManager: sits inside in the spring-secured-app
  - authenticate()
  - step1: Get hold of AuthenticationManagerBuilder
  - step2: set the configuration on it









